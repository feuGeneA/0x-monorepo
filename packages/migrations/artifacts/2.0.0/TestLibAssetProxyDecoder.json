{
	"schemaVersion": "2.0.0",
	"contractName": "TestLibAssetProxyDecoder",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"name": "publicDecodeERC721Data",
				"outputs": [
					{
						"name": "",
						"type": "uint8"
					},
					{
						"name": "",
						"type": "address"
					},
					{
						"name": "",
						"type": "uint256"
					},
					{
						"name": "",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"name": "publicDecodeERC20Data",
				"outputs": [
					{
						"name": "",
						"type": "uint8"
					},
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50610736806100206000396000f3006080604052600436106100325763ffffffff60e060020a60003504166372c2f5278114610037578063bd27c22d14610070575b600080fd5b34801561004357600080fd5b50610057610052366004610531565b61009e565b60405161006794939291906105ef565b60405180910390f35b34801561007c57600080fd5b5061009061008b366004610531565b6100bd565b6040516100679291906105d4565b600080600060606100ae856100d2565b93509350935093509193509193565b6000806100c9836101b5565b91509150915091565b60008060006060603585511015606060405190810160405280602b81526020017f4d65746164617461206d75737420686176652061206c656e677468206f662061815260200160a960020a6a3a103632b0b9ba101a9997028152509015156101595760405160e560020a62461bcd02815260040161015091906105c3565b60405180910390fd5b5084600081518110151561016957fe5b016020015160f860020a90819004810204935061018785600161025a565b92506101948560156102d6565b91506035855111156101ae576101ab8560356102e9565b90505b9193509193565b6000808251601514606060405190810160405280602281526020017f4d65746164617461206d75737420686176652061206c656e677468206f662032815260200160f160020a611897028152509015156102255760405160e560020a62461bcd02815260040161015091906105c3565b5082600081518110151561023557fe5b016020015160f860020a90819004810204915061025383600161025a565b9050915091565b60008160140183511015606060405190810160405280602b81526020016000805160206106dd833981519152815260200160a960020a6a38bab0b6103a3790191817028152509015156102c35760405160e560020a62461bcd02815260040161015091906105c3565b50500160140151600160a060020a031690565b60006102e283836103c1565b9392505050565b606060006102f784846102d6565b905060208301925080830184511015606060405190810160405280602b81526020016000805160206106dd833981519152815260200160a960020a6a38bab0b6103a3790199917028152509015156103655760405160e560020a62461bcd02815260040161015091906105c3565b50806040519080825280601f01601f191660200182016040528015610394578160200160208202803883390190505b5091506103ba6103a383610434565b602001846103b087610434565b0160200183610437565b5092915050565b60008160200183511015606060405190810160405280602b81526020016000805160206106dd833981519152815260200160a960020a6a38bab0b6103a37901999170281525090151561042a5760405160e560020a62461bcd02815260040161015091906105c3565b5050016020015190565b90565b6020811015610461576001816020036101000a0380198351168185511680821786525050506104d8565b8282141561046e576104d8565b828211156104a85760208103905080820181840181515b828510156104a0578451865260209586019590940193610485565b9052506104d8565b60208103905080820181840183515b828510156104d35782518252601f1992830192909101906104b7565b855250505b505050565b6000601f820183136104ee57600080fd5b81356105016104fc82610659565b610633565b9150808252602083016020830185838301111561051d57600080fd5b610528838284610696565b50505092915050565b60006020828403121561054357600080fd5b81356001604060020a0381111561055957600080fd5b610565848285016104dd565b949350505050565b61057681610684565b82525050565b600061058782610680565b80845261059b8160208601602086016106a2565b6105a4816106d2565b9093016020019392505050565b61057681610434565b61057681610690565b602080825281016102e2818461057c565b604081016105e282856105ba565b6102e2602083018461056d565b608081016105fd82876105ba565b61060a602083018661056d565b61061760408301856105b1565b8181036060830152610629818461057c565b9695505050505050565b6040518181016001604060020a038111828210171561065157600080fd5b604052919050565b60006001604060020a0382111561066f57600080fd5b506020601f91909101601f19160190565b5190565b600160a060020a031690565b60ff1690565b82818337506000910152565b60005b838110156106bd5781810151838201526020016106a5565b838111156106cc576000848401525b50505050565b601f01601f19169056004c656e677468206d7573742062652067726561746572207468616e206f722065a265627a7a72305820553d57b023227b0c1ab4298ebc09418b96b43c155916084510b14cb73e7e39ed6c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x736 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x32 JUMPI PUSH4 0xFFFFFFFF PUSH1 0xE0 PUSH1 0x2 EXP PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x72C2F527 DUP2 EQ PUSH2 0x37 JUMPI DUP1 PUSH4 0xBD27C22D EQ PUSH2 0x70 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x57 PUSH2 0x52 CALLDATASIZE PUSH1 0x4 PUSH2 0x531 JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x67 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x90 PUSH2 0x8B CALLDATASIZE PUSH1 0x4 PUSH2 0x531 JUMP JUMPDEST PUSH2 0xBD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x67 SWAP3 SWAP2 SWAP1 PUSH2 0x5D4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH2 0xAE DUP6 PUSH2 0xD2 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC9 DUP4 PUSH2 0x1B5 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH1 0x35 DUP6 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D65746164617461206D75737420686176652061206C656E677468206F662061 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x3A103632B0B9BA101A9997 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x159 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0x5C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x169 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP4 POP PUSH2 0x187 DUP6 PUSH1 0x1 PUSH2 0x25A JUMP JUMPDEST SWAP3 POP PUSH2 0x194 DUP6 PUSH1 0x15 PUSH2 0x2D6 JUMP JUMPDEST SWAP2 POP PUSH1 0x35 DUP6 MLOAD GT ISZERO PUSH2 0x1AE JUMPI PUSH2 0x1AB DUP6 PUSH1 0x35 PUSH2 0x2E9 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x15 EQ PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D65746164617461206D75737420686176652061206C656E677468206F662032 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xF1 PUSH1 0x2 EXP PUSH2 0x1897 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x225 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0x5C3 JUMP JUMPDEST POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x235 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP2 POP PUSH2 0x253 DUP4 PUSH1 0x1 PUSH2 0x25A JUMP JUMPDEST SWAP1 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x6DD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790191817 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x2C3 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0x5C3 JUMP JUMPDEST POP POP ADD PUSH1 0x14 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E2 DUP4 DUP4 PUSH2 0x3C1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2F7 DUP5 DUP5 PUSH2 0x2D6 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP4 ADD SWAP3 POP DUP1 DUP4 ADD DUP5 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x6DD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790199917 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x365 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0x5C3 JUMP JUMPDEST POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x394 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x3BA PUSH2 0x3A3 DUP4 PUSH2 0x434 JUMP JUMPDEST PUSH1 0x20 ADD DUP5 PUSH2 0x3B0 DUP8 PUSH2 0x434 JUMP JUMPDEST ADD PUSH1 0x20 ADD DUP4 PUSH2 0x437 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x6DD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790199917 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x42A JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0x5C3 JUMP JUMPDEST POP POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x461 JUMPI PUSH1 0x1 DUP2 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP4 MLOAD AND DUP2 DUP6 MLOAD AND DUP1 DUP3 OR DUP7 MSTORE POP POP POP PUSH2 0x4D8 JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0x46E JUMPI PUSH2 0x4D8 JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x4A8 JUMPI PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP2 MLOAD JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x4A0 JUMPI DUP5 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP5 ADD SWAP4 PUSH2 0x485 JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x4D8 JUMP JUMPDEST PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP4 MLOAD JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x4D3 JUMPI DUP3 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x4B7 JUMP JUMPDEST DUP6 MSTORE POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x4EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x501 PUSH2 0x4FC DUP3 PUSH2 0x659 JUMP JUMPDEST PUSH2 0x633 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x51D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x528 DUP4 DUP3 DUP5 PUSH2 0x696 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x543 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x565 DUP5 DUP3 DUP6 ADD PUSH2 0x4DD JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x576 DUP2 PUSH2 0x684 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x587 DUP3 PUSH2 0x680 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x59B DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH2 0x5A4 DUP2 PUSH2 0x6D2 JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x576 DUP2 PUSH2 0x434 JUMP JUMPDEST PUSH2 0x576 DUP2 PUSH2 0x690 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x2E2 DUP2 DUP5 PUSH2 0x57C JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x5E2 DUP3 DUP6 PUSH2 0x5BA JUMP JUMPDEST PUSH2 0x2E2 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x56D JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x5FD DUP3 DUP8 PUSH2 0x5BA JUMP JUMPDEST PUSH2 0x60A PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x56D JUMP JUMPDEST PUSH2 0x617 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x5B1 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x629 DUP2 DUP5 PUSH2 0x57C JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP3 GT ISZERO PUSH2 0x66F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6BD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x6A5 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x6CC JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP STOP 0x4c PUSH6 0x6E677468206D PUSH22 0x73742062652067726561746572207468616E206F7220 PUSH6 0xA265627A7A72 ADDRESS PC KECCAK256 SSTORE RETURNDATASIZE JUMPI 0xb0 0x23 0x22 PUSH28 0xC1AB4298EBC09418B96B43C155916084510B14CB73E7E39ED6C6578 PUSH17 0x6572696D656E74616CF500370000000000 ",
				"sourceMap": "709:590:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;709:590:0;;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x6080604052600436106100325763ffffffff60e060020a60003504166372c2f5278114610037578063bd27c22d14610070575b600080fd5b34801561004357600080fd5b50610057610052366004610531565b61009e565b60405161006794939291906105ef565b60405180910390f35b34801561007c57600080fd5b5061009061008b366004610531565b6100bd565b6040516100679291906105d4565b600080600060606100ae856100d2565b93509350935093509193509193565b6000806100c9836101b5565b91509150915091565b60008060006060603585511015606060405190810160405280602b81526020017f4d65746164617461206d75737420686176652061206c656e677468206f662061815260200160a960020a6a3a103632b0b9ba101a9997028152509015156101595760405160e560020a62461bcd02815260040161015091906105c3565b60405180910390fd5b5084600081518110151561016957fe5b016020015160f860020a90819004810204935061018785600161025a565b92506101948560156102d6565b91506035855111156101ae576101ab8560356102e9565b90505b9193509193565b6000808251601514606060405190810160405280602281526020017f4d65746164617461206d75737420686176652061206c656e677468206f662032815260200160f160020a611897028152509015156102255760405160e560020a62461bcd02815260040161015091906105c3565b5082600081518110151561023557fe5b016020015160f860020a90819004810204915061025383600161025a565b9050915091565b60008160140183511015606060405190810160405280602b81526020016000805160206106dd833981519152815260200160a960020a6a38bab0b6103a3790191817028152509015156102c35760405160e560020a62461bcd02815260040161015091906105c3565b50500160140151600160a060020a031690565b60006102e283836103c1565b9392505050565b606060006102f784846102d6565b905060208301925080830184511015606060405190810160405280602b81526020016000805160206106dd833981519152815260200160a960020a6a38bab0b6103a3790199917028152509015156103655760405160e560020a62461bcd02815260040161015091906105c3565b50806040519080825280601f01601f191660200182016040528015610394578160200160208202803883390190505b5091506103ba6103a383610434565b602001846103b087610434565b0160200183610437565b5092915050565b60008160200183511015606060405190810160405280602b81526020016000805160206106dd833981519152815260200160a960020a6a38bab0b6103a37901999170281525090151561042a5760405160e560020a62461bcd02815260040161015091906105c3565b5050016020015190565b90565b6020811015610461576001816020036101000a0380198351168185511680821786525050506104d8565b8282141561046e576104d8565b828211156104a85760208103905080820181840181515b828510156104a0578451865260209586019590940193610485565b9052506104d8565b60208103905080820181840183515b828510156104d35782518252601f1992830192909101906104b7565b855250505b505050565b6000601f820183136104ee57600080fd5b81356105016104fc82610659565b610633565b9150808252602083016020830185838301111561051d57600080fd5b610528838284610696565b50505092915050565b60006020828403121561054357600080fd5b81356001604060020a0381111561055957600080fd5b610565848285016104dd565b949350505050565b61057681610684565b82525050565b600061058782610680565b80845261059b8160208601602086016106a2565b6105a4816106d2565b9093016020019392505050565b61057681610434565b61057681610690565b602080825281016102e2818461057c565b604081016105e282856105ba565b6102e2602083018461056d565b608081016105fd82876105ba565b61060a602083018661056d565b61061760408301856105b1565b8181036060830152610629818461057c565b9695505050505050565b6040518181016001604060020a038111828210171561065157600080fd5b604052919050565b60006001604060020a0382111561066f57600080fd5b506020601f91909101601f19160190565b5190565b600160a060020a031690565b60ff1690565b82818337506000910152565b60005b838110156106bd5781810151838201526020016106a5565b838111156106cc576000848401525b50505050565b601f01601f19169056004c656e677468206d7573742062652067726561746572207468616e206f722065a265627a7a72305820553d57b023227b0c1ab4298ebc09418b96b43c155916084510b14cb73e7e39ed6c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x32 JUMPI PUSH4 0xFFFFFFFF PUSH1 0xE0 PUSH1 0x2 EXP PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x72C2F527 DUP2 EQ PUSH2 0x37 JUMPI DUP1 PUSH4 0xBD27C22D EQ PUSH2 0x70 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x57 PUSH2 0x52 CALLDATASIZE PUSH1 0x4 PUSH2 0x531 JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x67 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x90 PUSH2 0x8B CALLDATASIZE PUSH1 0x4 PUSH2 0x531 JUMP JUMPDEST PUSH2 0xBD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x67 SWAP3 SWAP2 SWAP1 PUSH2 0x5D4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH2 0xAE DUP6 PUSH2 0xD2 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC9 DUP4 PUSH2 0x1B5 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH1 0x35 DUP6 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D65746164617461206D75737420686176652061206C656E677468206F662061 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x3A103632B0B9BA101A9997 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x159 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0x5C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x169 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP4 POP PUSH2 0x187 DUP6 PUSH1 0x1 PUSH2 0x25A JUMP JUMPDEST SWAP3 POP PUSH2 0x194 DUP6 PUSH1 0x15 PUSH2 0x2D6 JUMP JUMPDEST SWAP2 POP PUSH1 0x35 DUP6 MLOAD GT ISZERO PUSH2 0x1AE JUMPI PUSH2 0x1AB DUP6 PUSH1 0x35 PUSH2 0x2E9 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x15 EQ PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D65746164617461206D75737420686176652061206C656E677468206F662032 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xF1 PUSH1 0x2 EXP PUSH2 0x1897 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x225 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0x5C3 JUMP JUMPDEST POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x235 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP2 POP PUSH2 0x253 DUP4 PUSH1 0x1 PUSH2 0x25A JUMP JUMPDEST SWAP1 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x6DD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790191817 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x2C3 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0x5C3 JUMP JUMPDEST POP POP ADD PUSH1 0x14 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E2 DUP4 DUP4 PUSH2 0x3C1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2F7 DUP5 DUP5 PUSH2 0x2D6 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP4 ADD SWAP3 POP DUP1 DUP4 ADD DUP5 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x6DD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790199917 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x365 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0x5C3 JUMP JUMPDEST POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x394 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x3BA PUSH2 0x3A3 DUP4 PUSH2 0x434 JUMP JUMPDEST PUSH1 0x20 ADD DUP5 PUSH2 0x3B0 DUP8 PUSH2 0x434 JUMP JUMPDEST ADD PUSH1 0x20 ADD DUP4 PUSH2 0x437 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x6DD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790199917 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x42A JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0x5C3 JUMP JUMPDEST POP POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x461 JUMPI PUSH1 0x1 DUP2 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP4 MLOAD AND DUP2 DUP6 MLOAD AND DUP1 DUP3 OR DUP7 MSTORE POP POP POP PUSH2 0x4D8 JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0x46E JUMPI PUSH2 0x4D8 JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x4A8 JUMPI PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP2 MLOAD JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x4A0 JUMPI DUP5 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP5 ADD SWAP4 PUSH2 0x485 JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x4D8 JUMP JUMPDEST PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP4 MLOAD JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x4D3 JUMPI DUP3 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x4B7 JUMP JUMPDEST DUP6 MSTORE POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x4EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x501 PUSH2 0x4FC DUP3 PUSH2 0x659 JUMP JUMPDEST PUSH2 0x633 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x51D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x528 DUP4 DUP3 DUP5 PUSH2 0x696 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x543 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x565 DUP5 DUP3 DUP6 ADD PUSH2 0x4DD JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x576 DUP2 PUSH2 0x684 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x587 DUP3 PUSH2 0x680 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x59B DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x6A2 JUMP JUMPDEST PUSH2 0x5A4 DUP2 PUSH2 0x6D2 JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x576 DUP2 PUSH2 0x434 JUMP JUMPDEST PUSH2 0x576 DUP2 PUSH2 0x690 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x2E2 DUP2 DUP5 PUSH2 0x57C JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x5E2 DUP3 DUP6 PUSH2 0x5BA JUMP JUMPDEST PUSH2 0x2E2 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x56D JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x5FD DUP3 DUP8 PUSH2 0x5BA JUMP JUMPDEST PUSH2 0x60A PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x56D JUMP JUMPDEST PUSH2 0x617 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x5B1 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x629 DUP2 DUP5 PUSH2 0x57C JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP3 GT ISZERO PUSH2 0x66F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6BD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x6A5 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x6CC JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP STOP 0x4c PUSH6 0x6E677468206D PUSH22 0x73742062652067726561746572207468616E206F7220 PUSH6 0xA265627A7A72 ADDRESS PC KECCAK256 SSTORE RETURNDATASIZE JUMPI 0xb0 0x23 0x22 PUSH28 0xC1AB4298EBC09418B96B43C155916084510B14CB73E7E39ED6C6578 PUSH17 0x6572696D656E74616CF500370000000000 ",
				"sourceMap": "709:590:0:-;;;;;;;;;-1:-1:-1;;;709:590:0;;;;;;;;;;;;;;;;;;1044:253;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1044:253:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;823:170;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;823:170:0;;;;;;;;;;;;;;;;;;1044:253;1158:5;1177:7;1198;1219:5;1263:27;1280:9;1263:16;:27::i;:::-;1256:34;;;;;;;;1044:253;;;;;:::o;823:170::-;923:5;930:7;960:26;976:9;960:15;:26::i;:::-;953:33;;;;823:170;;;:::o;1409:608:1:-;1519:13;1546;1573:15;1602:17;1685:2;1665:9;:16;:22;;1701:30;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1701:30:1;;;1644:97;;;;;;;-1:-1:-1;;;;;1644:97:1;;;;;;;;;;;;;;;;;;;1767:9;1777:1;1767:12;;;;;;;;;;;;;;-1:-1:-1;;;1767:12:1;;;;;;1761:19;;-1:-1:-1;1798:25:1;1810:9;1821:1;1798:11;:25::i;:::-;1790:33;;1843:26;1855:9;1866:2;1843:11;:26::i;:::-;1833:36;;1902:2;1883:9;:16;:21;1879:83;;;1927:24;1937:9;1948:2;1927:9;:24::i;:::-;1920:31;;1879:83;1409:608;;;;;:::o;965:393::-;1074:13;1101;1160:9;:16;1180:2;1160:22;1196:29;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1196:29:1;;;1139:96;;;;;;;-1:-1:-1;;;;;1139:96:1;;;;;;;;;;;1261:9;1271:1;1261:12;;;;;;;;;;;;;;-1:-1:-1;;;1261:12:1;;;;;;1255:19;;-1:-1:-1;1292:25:1;1304:9;1315:1;1292:11;:25::i;:::-;1284:33;-1:-1:-1;965:393:1;;;:::o;2204:868:2:-;2325:14;2388:5;2396:2;2388:10;2376:1;:8;:22;;2440;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2440:22:2;;;;-1:-1:-1;;;;;2440:22:2;;;2355:117;;;;;;;-1:-1:-1;;;;;2355:117:2;;;;;;;;;;-1:-1:-1;;2974:13:2;2719:2;2974:13;2968:20;-1:-1:-1;;;;;2964:69:2;;2204:868::o;6338:195::-;6459:14;6504:21;6516:1;6519:5;6504:11;:21::i;:::-;6496:30;6338:195;-1:-1:-1;;;6338:195:2:o;7192:757::-;7311:19;7385:25;7413:21;7425:1;7428:5;7413:11;:21::i;:::-;7385:49;;7453:2;7444:11;;;;7589:17;7581:5;:25;7569:1;:8;:37;;7620:22;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7620:22:2;;;;-1:-1:-1;;;;;7620:22:2;;;7548:104;;;;;;;-1:-1:-1;;;;;7548:104:2;;;;;;;;;;;7734:17;7724:28;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;7724:28:2;;7715:37;;7762:156;7782:21;7796:6;7782:13;:21::i;:::-;7806:2;7782:26;7867:5;7848:16;7862:1;7848:13;:16::i;:::-;:24;7875:2;7848:29;7891:17;7762:6;:156::i;:::-;7192:757;;;;;:::o;4956:472::-;5077:14;5140:5;5148:2;5140:10;5128:1;:8;:22;;5164;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;5164:22:2;;;;-1:-1:-1;;;;;5164:22:2;;;5107:89;;;;;;;-1:-1:-1;;;;;5107:89:2;;;;;;;;;;-1:-1:-1;;5375:13:2;5277:2;5375:13;5369:20;;4956:472::o;633:203:3:-;790:5;633:203::o;1076:3746::-;1225:2;1216:6;:11;1212:3604;;;1514:1;1504:6;1500:2;1496:15;1491:3;1487:25;1483:33;1565:4;1561:9;1552:6;1546:13;1542:29;1614:4;1607;1601:11;1597:22;1655:1;1652;1649:8;1643:4;1636:22;1453:219;;;;;;1776:4;1766:6;:14;1762:59;;;1800:7;;1762:59;2522:4;2513:6;:13;2509:2297;;;2848:2;2840:6;2836:15;2826:25;;2896:6;2888;2884:19;2946:6;2940:4;2936:17;3273:4;3267:11;3374:198;3392:4;3384:6;3381:16;3374:198;;;3440:13;;3427:27;;3501:2;3537:13;;;;3489:15;;;;3374:198;;;3661:18;;-1:-1:-1;2555:1142:3;;;3942:2;3934:6;3930:15;3920:25;;3990:6;3982;3978:19;4040:6;4034:4;4030:17;4370:6;4364:13;4473:192;4491:4;4483:6;4480:16;4473:192;;;4539:11;;4526:25;;-1:-1:-1;;4584:13:3;;;;4630;;;;4473:192;;;4755:19;;-1:-1:-1;;3744:1048:3;1076:3746;;;:::o;6:440:-1:-;;100:4;88:17;;84:27;-1:-1;74:2;;125:1;122;115:12;74:2;162:6;149:20;184:64;199:48;240:6;199:48;;;184:64;;;175:73;;268:6;261:5;254:21;304:4;296:6;292:17;337:4;330:5;326:16;372:3;363:6;358:3;354:16;351:25;348:2;;;389:1;386;379:12;348:2;399:41;433:6;428:3;423;399:41;;;67:379;;;;;;;;454:345;;567:2;555:9;546:7;542:23;538:32;535:2;;;583:1;580;573:12;535:2;618:31;;-1:-1;;;;;658:30;;655:2;;;701:1;698;691:12;655:2;721:62;775:7;766:6;755:9;751:22;721:62;;;711:72;529:270;-1:-1;;;;529:270;806:110;879:31;904:5;879:31;;;874:3;867:44;861:55;;;923:297;;1023:38;1055:5;1023:38;;;1078:6;1073:3;1066:19;1090:63;1146:6;1139:4;1134:3;1130:14;1123:4;1116:5;1112:16;1090:63;;;1185:29;1207:6;1185:29;;;1165:50;;;1178:4;1165:50;;1003:217;-1:-1;;;1003:217;1526:110;1599:31;1624:5;1599:31;;1643:104;1712:29;1735:5;1712:29;;1754:273;1878:2;1892:47;;;1863:18;;1953:64;1863:18;2003:6;1953:64;;2034:286;2166:2;2151:18;;2180:57;2155:9;2210:6;2180:57;;;2248:62;2306:2;2295:9;2291:18;2282:6;2248:62;;2327:573;2533:3;2518:19;;2548:57;2522:9;2578:6;2548:57;;;2616:62;2674:2;2663:9;2659:18;2650:6;2616:62;;;2689;2747:2;2736:9;2732:18;2723:6;2689:62;;;2799:9;2793:4;2789:20;2784:2;2773:9;2769:18;2762:48;2824:66;2885:4;2876:6;2824:66;;;2816:74;2504:396;-1:-1;;;;;;2504:396;2907:256;2969:2;2963:9;2995:17;;;-1:-1;;;;;3055:34;;3091:22;;;3052:62;3049:2;;;3127:1;3124;3117:12;3049:2;3143;3136:22;2947:216;;-1:-1;2947:216;3170:258;;-1:-1;;;;;3305:6;3302:30;3299:2;;;3345:1;3342;3335:12;3299:2;-1:-1;3418:4;3389;3366:17;;;;-1:-1;;3362:33;3408:15;;3236:192;3435:91;3509:12;;3493:33;3628:128;-1:-1;;;;;3697:54;;3680:76;3849:88;3927:4;3916:16;;3899:38;3945:145;4026:6;4021:3;4016;4003:30;-1:-1;4082:1;4064:16;;4057:27;3996:94;4099:268;4164:1;4171:101;4185:6;4182:1;4179:13;4171:101;;;4252:11;;;4246:18;4233:11;;;4226:39;4207:2;4200:10;4171:101;;;4287:6;4284:1;4281:13;4278:2;;;4352:1;4343:6;4338:3;4334:16;4327:27;4278:2;4148:219;;;;;4375:97;4463:2;4443:14;-1:-1;;4439:28;;4423:49"
			}
		}
	},
	"sources": {
		"current/test/TestLibAssetProxyDecoder/TestLibAssetProxyDecoder.sol": {
			"id": 0
		},
		"current/utils/LibAssetProxyDecoder/LibAssetProxyDecoder.sol": {
			"id": 1
		},
		"current/utils/LibBytes/LibBytes.sol": {
			"id": 2
		},
		"current/utils/LibMem/LibMem.sol": {
			"id": 3
		}
	},
	"sourceCodes": {
		"current/test/TestLibAssetProxyDecoder/TestLibAssetProxyDecoder.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/LibAssetProxyDecoder/LibAssetProxyDecoder.sol\";\n\ncontract TestLibAssetProxyDecoder is\n    LibAssetProxyDecoder\n{\n\n    /// @dev Decodes ERC721 Asset Proxy data\n    function publicDecodeERC20Data(bytes memory assetData)\n        public\n        pure\n        returns (uint8, address)\n    {\n        return decodeERC20Data(assetData);\n    }\n\n    /// @dev Decodes ERC721 Asset Proxy data\n    function publicDecodeERC721Data(bytes memory assetData)\n        public\n        pure\n        returns (\n            uint8,\n            address,\n            uint256,\n            bytes memory\n        )\n    {\n        return decodeERC721Data(assetData);\n    }\n}\n",
		"current/utils/LibAssetProxyDecoder/LibAssetProxyDecoder.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../LibBytes/LibBytes.sol\";\n\ncontract LibAssetProxyDecoder is\n    LibBytes\n{\n\n    string constant INVALID_ERC20_METADATA_LENGTH = \"Metadata must have a length of 21.\";\n    string constant INVALID_ERC721_METADATA_LENGTH = \"Metadata must have a length of at least 53.\";\n\n    /// @dev Decodes ERC721 Asset Proxy data\n    function decodeERC20Data(bytes memory assetData)\n        internal\n        pure\n        returns (\n            uint8 proxyId,\n            address token\n        )\n    {\n        require(\n            assetData.length == 21,\n            INVALID_ERC20_METADATA_LENGTH\n        );\n        proxyId = uint8(assetData[0]);\n        token = readAddress(assetData, 1);\n\n        return (proxyId, token);\n    }\n\n    /// @dev Decodes ERC721 Asset Proxy data\n    function decodeERC721Data(bytes memory assetData)\n        internal\n        pure\n        returns (\n            uint8 proxyId,\n            address token,\n            uint256 tokenId,\n            bytes memory data\n        )\n    {\n        require(\n            assetData.length >= 53,\n            INVALID_ERC721_METADATA_LENGTH\n        );\n        proxyId = uint8(assetData[0]);\n        token = readAddress(assetData, 1);\n        tokenId = readUint256(assetData, 21);\n        if (assetData.length > 53) {\n            data = readBytes(assetData, 53);\n        }\n\n        return (proxyId, token, tokenId, data);\n    }\n}\n",
		"current/utils/LibBytes/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../LibMem/LibMem.sol\";\n\ncontract LibBytes is\n    LibMem\n{\n\n    // Revert reasons\n    string constant GTE_20_LENGTH_REQUIRED = \"Length must be greater than or equal to 20.\";\n    string constant GTE_32_LENGTH_REQUIRED = \"Length must be greater than or equal to 32.\";\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function areBytesEqual(bytes memory lhs, bytes memory rhs)\n        internal\n        pure\n        returns (bool equal)\n    {\n        assembly {\n            // Get the number of words occupied by <lhs>\n            let lenFullWords := div(add(mload(lhs), 0x1F), 0x20)\n\n            // Add 1 to the number of words, to account for the length field\n            lenFullWords := add(lenFullWords, 0x1)\n\n            // Test equality word-by-word.\n            // Terminates early if there is a mismatch.\n            for {let i := 0} lt(i, lenFullWords) {i := add(i, 1)} {\n                let lhsWord := mload(add(lhs, mul(i, 0x20)))\n                let rhsWord := mload(add(rhs, mul(i, 0x20)))\n                equal := eq(lhsWord, rhsWord)\n                if eq(equal, 0) {\n                    // Break\n                    i := lenFullWords\n                }\n            }\n       }\n\n       return equal;\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GTE_20_LENGTH_REQUIRED\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GTE_20_LENGTH_REQUIRED\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(mload(add(b, index)), 0xffffffffffffffffffffffff0000000000000000000000000000000000000000)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            GTE_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            GTE_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        return uint256(readBytes32(b, index));\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readBytes(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            GTE_32_LENGTH_REQUIRED\n        );\n\n        // Allocate memory and copy value to result\n        result = new bytes(nestedBytesLength);\n        memcpy(\n            getMemAddress(result) + 32, // +32 skips array length\n            getMemAddress(b) + index + 32,\n            nestedBytesLength\n        );\n\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeBytes(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Read length of nested bytes\n        require(\n            b.length >= index + 32 /* 32 bytes to store length */ + input.length,\n            GTE_32_LENGTH_REQUIRED\n        );\n\n        // Copy <input> into <b>\n        memcpy(\n            getMemAddress(b) + index + 32,  // +32 to skip length of <b>\n            getMemAddress(input),           // include length of byte array\n            input.length + 32               // +32 bytes to store length\n        );\n    }\n}\n",
		"current/utils/LibMem/LibMem.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibMem {\n    \n    function getMemAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 address_)\n    {\n        assembly {\n            address_ := input\n        }\n        return address_;\n    }\n    \n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to\n    /// @param source memory address to copy bytes from\n    /// @param length number of bytes to copy\n    function memcpy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n            \n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `send` and `dend` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let send := add(source, length)\n                    let dend := add(dest, length)\n                    \n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(send)\n                    \n                    // Copy whole words front to back\n                    for {} lt(source, send) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n                    \n                    // Write the last 32 bytes\n                    mstore(dend, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `send` and `dend` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let send := add(source, length)\n                    let dend := add(dest, length)\n                    \n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n                    \n                    // Copy whole words back to front\n                    for {} lt(source, send) {} {\n                        mstore(dend, mload(send))\n                        send := sub(send, 32)\n                        dend := sub(dend, 32)\n                    }\n                    \n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n}\n"
	},
	"sourceTreeHashHex": "0x4a6303ab01b7e3d0aca5f97b071b5caab643890070f0a66ccc2cd54f3d353215",
	"compiler": {
		"name": "solc",
		"version": "0.4.24",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 0
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"networks": {}
}