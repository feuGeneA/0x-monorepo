{
	"schemaVersion": "2.0.0",
	"contractName": "TestLibMem",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "mem",
						"type": "bytes"
					},
					{
						"name": "dest",
						"type": "uint256"
					},
					{
						"name": "source",
						"type": "uint256"
					},
					{
						"name": "length",
						"type": "uint256"
					}
				],
				"name": "testMemcpy",
				"outputs": [
					{
						"name": "",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50610240806100206000396000f3006080604052600436106100275763ffffffff60e060020a60003504166378bbae9b811461002c575b600080fd5b34801561003857600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610092943694929360249392840191908190840183828082843750949750508435955050506020830135926040013591506101079050565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100cc5781810151838201526020016100b4565b50505050905090810190601f1680156100f95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6060600085518385011115151561011d57600080fd5b8551858401111561012d57600080fd5b61013686610154565b602001905061014a85820185830185610157565b5093949350505050565b90565b6020811015610181576001816020036101000a03801983511681855116808217865250505061020f565b8282141561018e5761020f565b828211156101d45760208104602082039150818301828501815160005b848110156101c95786518852602097880197909601956001016101ab565b5090525061020f9050565b60208104602082039150818301828501845160005b848110156102085783518352601f1993840193909201916001016101e9565b5086525050505b5050505600a165627a7a72305820c45d0cec3c4147bf99ff7c2226c609a2356600dc1dcde0a4d379564d8325a1860029",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x27 JUMPI PUSH4 0xFFFFFFFF PUSH1 0xE0 PUSH1 0x2 EXP PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x78BBAE9B DUP2 EQ PUSH2 0x2C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x4 DUP1 CALLDATALOAD DUP1 DUP3 ADD CALLDATALOAD PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP6 ADD DUP5 ADD SWAP1 SWAP6 MSTORE DUP5 DUP5 MSTORE PUSH2 0x92 SWAP5 CALLDATASIZE SWAP5 SWAP3 SWAP4 PUSH1 0x24 SWAP4 SWAP3 DUP5 ADD SWAP2 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP POP DUP5 CALLDATALOAD SWAP6 POP POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP3 PUSH1 0x40 ADD CALLDATALOAD SWAP2 POP PUSH2 0x107 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCC JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xF9 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP6 MLOAD DUP4 DUP6 ADD GT ISZERO ISZERO ISZERO PUSH2 0x11D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 MLOAD DUP6 DUP5 ADD GT ISZERO PUSH2 0x12D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x136 DUP7 PUSH2 0x154 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 POP PUSH2 0x14A DUP6 DUP3 ADD DUP6 DUP4 ADD DUP6 PUSH2 0x157 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x181 JUMPI PUSH1 0x1 DUP2 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP4 MLOAD AND DUP2 DUP6 MLOAD AND DUP1 DUP3 OR DUP7 MSTORE POP POP POP PUSH2 0x20F JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0x18E JUMPI PUSH2 0x20F JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x1D4 JUMPI PUSH1 0x20 DUP2 DIV PUSH1 0x20 DUP3 SUB SWAP2 POP DUP2 DUP4 ADD DUP3 DUP6 ADD DUP2 MLOAD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1C9 JUMPI DUP7 MLOAD DUP9 MSTORE PUSH1 0x20 SWAP8 DUP9 ADD SWAP8 SWAP1 SWAP7 ADD SWAP6 PUSH1 0x1 ADD PUSH2 0x1AB JUMP JUMPDEST POP SWAP1 MSTORE POP PUSH2 0x20F SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 DIV PUSH1 0x20 DUP3 SUB SWAP2 POP DUP2 DUP4 ADD DUP3 DUP6 ADD DUP5 MLOAD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x208 JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x1F NOT SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1E9 JUMP JUMPDEST POP DUP7 MSTORE POP POP POP JUMPDEST POP POP POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xc4 0x5d 0xc 0xec EXTCODECOPY COINBASE 0x47 0xbf SWAP10 SELFDESTRUCT PUSH29 0x2226C609A2356600DC1DCDE0A4D379564D8325A1860029000000000000 ",
				"sourceMap": "647:1040:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;647:1040:0;;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x6080604052600436106100275763ffffffff60e060020a60003504166378bbae9b811461002c575b600080fd5b34801561003857600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610092943694929360249392840191908190840183828082843750949750508435955050506020830135926040013591506101079050565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100cc5781810151838201526020016100b4565b50505050905090810190601f1680156100f95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6060600085518385011115151561011d57600080fd5b8551858401111561012d57600080fd5b61013686610154565b602001905061014a85820185830185610157565b5093949350505050565b90565b6020811015610181576001816020036101000a03801983511681855116808217865250505061020f565b8282141561018e5761020f565b828211156101d45760208104602082039150818301828501815160005b848110156101c95786518852602097880197909601956001016101ab565b5090525061020f9050565b60208104602082039150818301828501845160005b848110156102085783518352601f1993840193909201916001016101e9565b5086525050505b5050505600a165627a7a72305820c45d0cec3c4147bf99ff7c2226c609a2356600dc1dcde0a4d379564d8325a1860029",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x27 JUMPI PUSH4 0xFFFFFFFF PUSH1 0xE0 PUSH1 0x2 EXP PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x78BBAE9B DUP2 EQ PUSH2 0x2C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x4 DUP1 CALLDATALOAD DUP1 DUP3 ADD CALLDATALOAD PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP6 ADD DUP5 ADD SWAP1 SWAP6 MSTORE DUP5 DUP5 MSTORE PUSH2 0x92 SWAP5 CALLDATASIZE SWAP5 SWAP3 SWAP4 PUSH1 0x24 SWAP4 SWAP3 DUP5 ADD SWAP2 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP POP DUP5 CALLDATALOAD SWAP6 POP POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP3 PUSH1 0x40 ADD CALLDATALOAD SWAP2 POP PUSH2 0x107 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCC JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xF9 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP6 MLOAD DUP4 DUP6 ADD GT ISZERO ISZERO ISZERO PUSH2 0x11D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 MLOAD DUP6 DUP5 ADD GT ISZERO PUSH2 0x12D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x136 DUP7 PUSH2 0x154 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 POP PUSH2 0x14A DUP6 DUP3 ADD DUP6 DUP4 ADD DUP6 PUSH2 0x157 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x181 JUMPI PUSH1 0x1 DUP2 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP4 MLOAD AND DUP2 DUP6 MLOAD AND DUP1 DUP3 OR DUP7 MSTORE POP POP POP PUSH2 0x20F JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0x18E JUMPI PUSH2 0x20F JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x1D4 JUMPI PUSH1 0x20 DUP2 DIV PUSH1 0x20 DUP3 SUB SWAP2 POP DUP2 DUP4 ADD DUP3 DUP6 ADD DUP2 MLOAD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1C9 JUMPI DUP7 MLOAD DUP9 MSTORE PUSH1 0x20 SWAP8 DUP9 ADD SWAP8 SWAP1 SWAP7 ADD SWAP6 PUSH1 0x1 ADD PUSH2 0x1AB JUMP JUMPDEST POP SWAP1 MSTORE POP PUSH2 0x20F SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 DIV PUSH1 0x20 DUP3 SUB SWAP2 POP DUP2 DUP4 ADD DUP3 DUP6 ADD DUP5 MLOAD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x208 JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x1F NOT SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1E9 JUMP JUMPDEST POP DUP7 MSTORE POP POP POP JUMPDEST POP POP POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xc4 0x5d 0xc 0xec EXTCODECOPY COINBASE 0x47 0xbf SWAP10 SELFDESTRUCT PUSH29 0x2226C609A2356600DC1DCDE0A4D379564D8325A1860029000000000000 ",
				"sourceMap": "647:1040:0:-;;;;;;;;;-1:-1:-1;;;647:1040:0;;;;;;;;;;;;;1045:640;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1045:640:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1045:640:0;;-1:-1:-1;;1045:640:0;;;-1:-1:-1;;;1045:640:0;;;;;;;;;-1:-1:-1;1045:640:0;;-1:-1:-1;1045:640:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1045:640:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1246:5;1456:14;1346:3;:10;1336:6;1327;:15;:29;;1319:38;;;;;;;;1392:10;;1375:13;;;:27;;1367:36;;;;;;1473:18;1487:3;1473:13;:18::i;:::-;1494:2;1473:23;1456:40;;1568:46;1584:4;1575:6;:13;1599:6;1590;:15;1607:6;1568;:46::i;:::-;-1:-1:-1;1675:3:0;;1045:640;-1:-1:-1;;;;1045:640:0:o;787:218:1:-;954:5;787:218::o;1244:3896::-;1393:2;1384:6;:11;1380:3754;;;1682:1;1672:6;1668:2;1664:15;1659:3;1655:25;1651:33;1733:4;1729:9;1720:6;1714:13;1710:29;1782:4;1775;1769:11;1765:22;1823:1;1820;1817:8;1811:4;1804:22;1621:219;;;;;;1944:4;1934:6;:14;1930:59;;;1968:7;;1930:59;2678:4;2669:6;:13;2665:2459;;;2828:2;2820:6;2816:15;3124:2;3116:6;3112:15;3102:25;;3172:6;3164;3160:19;3222:6;3216:4;3212:17;3529:4;3523:11;3624:1;3610:219;3633:6;3630:1;3627:13;3610:219;;;3697:13;;3684:27;;3758:2;3794:13;;;;3746:15;;;;3654:1;3647:9;3610:219;;;-1:-1:-1;3898:18:1;;-1:-1:-1;2711:1223:1;;-1:-1:-1;2711:1223:1;;4098:2;4090:6;4086:15;4299:2;4291:6;4287:15;4277:25;;4347:6;4339;4335:19;4397:6;4391:4;4387:17;4707:6;4701:13;4804:1;4790:213;4813:6;4810:1;4807:13;4790:213;;;4877:11;;4864:25;;-1:-1:-1;;4922:13:1;;;;4968;;;;4834:1;4827:9;4790:213;;;-1:-1:-1;5073:19:1;;-1:-1:-1;;;3981:1129:1;1244:3896;;;:::o"
			}
		}
	},
	"sources": {
		"current/test/TestLibMem/TestLibMem.sol": {
			"id": 0
		},
		"current/utils/LibMem/LibMem.sol": {
			"id": 1
		}
	},
	"sourceCodes": {
		"current/test/TestLibMem/TestLibMem.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../../utils/LibMem/LibMem.sol\";\n\ncontract TestLibMem is\n    LibMem\n{\n\n    /// @dev Copies a block of memory from one location to another.\n    /// @param mem Memory contents we want to apply memcpy to\n    /// @param dest Destination offset into <mem>.\n    /// @param source Source offset into <mem>.\n    /// @param length Length of bytes to copy from <source> to <dest>\n    /// @return mem Memory contents after calling memcpy.\n    function testMemcpy(\n        bytes mem,\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        public // not external, we need input in memory\n        pure\n        returns (bytes)\n    {\n        // Sanity check. Overflows are not checked.\n        require(source + length <= mem.length);\n        require(dest + length <= mem.length);\n\n        // Get pointer to memory contents\n        uint256 offset = getMemAddress(mem) + 32;\n\n        // Execute memcpy adjusted for memory array location\n        memcpy(offset + dest, offset + source, length);\n\n        // Return modified memory contents\n        return mem;\n    }\n}\n",
		"current/utils/LibMem/LibMem.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibMem\n{\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array.\n    function getMemAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memcpy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // Record the total number of full words to copy\n                    let nwords := div(length, 32)\n\n                    // We subtract 32 from `send` and `dend` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let send := add(source, length)\n                    let dend := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(send)\n\n                    // Copy whole words front to back\n                    for {let i := 0} lt(i, nwords) {i := add(i, 1)} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dend, last)\n                }\n            } else {\n                assembly {\n                    // Record the total number of full words to copy\n                    let nwords := div(length, 32)\n\n                    // We subtract 32 from `send` and `dend` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let send := add(source, length)\n                    let dend := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    for {let i := 0} lt(i, nwords) {i := add(i, 1)} {\n                        mstore(dend, mload(send))\n                        send := sub(send, 32)\n                        dend := sub(dend, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n}\n"
	},
	"sourceTreeHashHex": "0x5faf0c5cf077c90a79db501fc1095e0a3dc53cb31322d2365c3c34dd2f2558f8",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.4.24+commit.e67f0147.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 0
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"networks": {}
}